[build-system]
requires = ["setuptools>=61.2"]
build-backend = "setuptools.build_meta"

[project]
name = "lazy_loader"
requires-python = ">=3.9"
authors = [{name = "Scientific Python Developers"}]
readme = "README.md"
license = {file = "LICENSE.md"}
dynamic = ['version']
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
description = "Makes it easy to load subpackages and functions on demand."
dependencies = [
  "packaging",
]

[project.optional-dependencies]
test = ["pytest >= 8.0", "pytest-cov >= 5.0"]
lint = ["pre-commit == 4.1.0"]
dev = ["changelist == 0.5"]

[project.urls]
Home = "https://scientific-python.org/specs/spec-0001/"
Source = "https://github.com/scientific-python/lazy-loader"

[tool.setuptools.dynamic.version]
attr = 'lazy_loader.__version__'

[tool.changelist]
ignored_user_logins = ["dependabot[bot]", "pre-commit-ci[bot]", "web-flow"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]
log_cli_level = "info"

[tool.ruff]
exclude = [
  "lazy_loader/tests/fake_pkg/__init__.pyi",
]

[tool.ruff.lint]
extend-select = [
  "B",        # flake8-bugbear
  "I",        # isort
  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
  "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
#  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "FURB",     # refurb
  "PYI",      # flake8-pyi
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  "B018",     # Found useless expression
  "B028",     # No explicit `stacklevel` keyword argument found
  "PT011",    # `pytest.raises(ValueError)` is too broad
  "EM102",    # Exception must not use an f-string literal
  "EM101",    # Exception must not use a string literal
  "RET505",   # Unnecessary `elif` after `return` statement
  "SIM108",   # Use ternary operator
]

[tool.ruff.format]
docstring-code-format = true
